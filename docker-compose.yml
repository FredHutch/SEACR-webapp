version: '3.3'

services:

  rabbitmq:
    image: rabbitmq:3
    configs:
      - source: seacr-rabbitmq-config
        target: /etc/rabbitmq/conf.d/30-consumer-timeout.conf
    networks:
      - proxy
    stdin_open: true

  webapp:
    networks:
      - proxy  
    image: sc-registry.fredhutch.org/seacr
    stdin_open: true
    volumes:
      - seacr:/seacr-data
    secrets:
    - SEACR_APP_SECRET
    - SEACR_RECAPTCHA_SECRET_KEY
    - SEACR_ISSUE_EMAIL_RECIPIENTS
    - SEACR_EMAIL_SERVER
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.seacr.rule=Host(`seacr.fredhutch.org`)"
        - "traefik.http.routers.seacr-secured.rule=Host(`seacr.fredhutch.org`)"
        - "traefik.http.routers.seacr.entrypoints=web,web-secured"
        - "traefik.http.services.seacr.loadbalancer.server.port=8001" # it seems you always need to give traefik a port so it 'notices' the service
        - "traefik.http.routers.seacr.tls=true"
      restart_policy:
        condition: on-failure
    environment:
      - SEACR_APP_SECRET

  celery:
    networks:
      - proxy
    image: sc-registry.fredhutch.org/seacr
    stdin_open: true
    command: ./run-celery.sh
    volumes:
      - seacr:/seacr-data
    deploy:
      restart_policy:
        condition: on-failure

  cron-cleaner:
    image: sc-registry.fredhutch.org/seacr
    stdin_open: true
    command: "cron && tail -f /var/log/cron.log"
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - seacr:/seacr-data
    restart: always

secrets:
  SEACR_APP_SECRET:
    external: true
  SEACR_RECAPTCHA_SECRET_KEY:
    external: true
  SEACR_ISSUE_EMAIL_RECIPIENTS:
    external: true
  SEACR_EMAIL_SERVER:
    external: true

volumes:
  seacr:
    driver: local
    driver_opts:
      type: nfs
      device: "${PERSISTENT_VOLUME_PATH}"
      o: addr=${NFS_SERVER},rw

networks:
  proxy:
    external: true

configs:
  seacr-rabbitmq-config:
    external: true
